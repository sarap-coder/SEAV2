// Generated by gencpp from file pal_waypoint_msgs/DoWaypointNavigationFeedback.msg
// DO NOT EDIT!


#ifndef PAL_WAYPOINT_MSGS_MESSAGE_DOWAYPOINTNAVIGATIONFEEDBACK_H
#define PAL_WAYPOINT_MSGS_MESSAGE_DOWAYPOINTNAVIGATIONFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pal_waypoint_msgs
{
template <class ContainerAllocator>
struct DoWaypointNavigationFeedback_
{
  typedef DoWaypointNavigationFeedback_<ContainerAllocator> Type;

  DoWaypointNavigationFeedback_()
    : waypoints()  {
    }
  DoWaypointNavigationFeedback_(const ContainerAllocator& _alloc)
    : waypoints(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _waypoints_type;
  _waypoints_type waypoints;





  typedef boost::shared_ptr< ::pal_waypoint_msgs::DoWaypointNavigationFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pal_waypoint_msgs::DoWaypointNavigationFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct DoWaypointNavigationFeedback_

typedef ::pal_waypoint_msgs::DoWaypointNavigationFeedback_<std::allocator<void> > DoWaypointNavigationFeedback;

typedef boost::shared_ptr< ::pal_waypoint_msgs::DoWaypointNavigationFeedback > DoWaypointNavigationFeedbackPtr;
typedef boost::shared_ptr< ::pal_waypoint_msgs::DoWaypointNavigationFeedback const> DoWaypointNavigationFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pal_waypoint_msgs::DoWaypointNavigationFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pal_waypoint_msgs::DoWaypointNavigationFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pal_waypoint_msgs::DoWaypointNavigationFeedback_<ContainerAllocator1> & lhs, const ::pal_waypoint_msgs::DoWaypointNavigationFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.waypoints == rhs.waypoints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pal_waypoint_msgs::DoWaypointNavigationFeedback_<ContainerAllocator1> & lhs, const ::pal_waypoint_msgs::DoWaypointNavigationFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pal_waypoint_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pal_waypoint_msgs::DoWaypointNavigationFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pal_waypoint_msgs::DoWaypointNavigationFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_waypoint_msgs::DoWaypointNavigationFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_waypoint_msgs::DoWaypointNavigationFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_waypoint_msgs::DoWaypointNavigationFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_waypoint_msgs::DoWaypointNavigationFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pal_waypoint_msgs::DoWaypointNavigationFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a99b9a3e28048e5a6aa5336280edec75";
  }

  static const char* value(const ::pal_waypoint_msgs::DoWaypointNavigationFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa99b9a3e28048e5aULL;
  static const uint64_t static_value2 = 0x6aa5336280edec75ULL;
};

template<class ContainerAllocator>
struct DataType< ::pal_waypoint_msgs::DoWaypointNavigationFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pal_waypoint_msgs/DoWaypointNavigationFeedback";
  }

  static const char* value(const ::pal_waypoint_msgs::DoWaypointNavigationFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pal_waypoint_msgs::DoWaypointNavigationFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Waypoints reached successfully, by index inside the group parameter\n"
"int32[] waypoints\n"
"\n"
;
  }

  static const char* value(const ::pal_waypoint_msgs::DoWaypointNavigationFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pal_waypoint_msgs::DoWaypointNavigationFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.waypoints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DoWaypointNavigationFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pal_waypoint_msgs::DoWaypointNavigationFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pal_waypoint_msgs::DoWaypointNavigationFeedback_<ContainerAllocator>& v)
  {
    s << indent << "waypoints[]" << std::endl;
    for (size_t i = 0; i < v.waypoints.size(); ++i)
    {
      s << indent << "  waypoints[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.waypoints[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PAL_WAYPOINT_MSGS_MESSAGE_DOWAYPOINTNAVIGATIONFEEDBACK_H
