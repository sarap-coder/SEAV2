// Generated by gencpp from file pal_waypoint_msgs/DoWaypointNavigationGoal.msg
// DO NOT EDIT!


#ifndef PAL_WAYPOINT_MSGS_MESSAGE_DOWAYPOINTNAVIGATIONGOAL_H
#define PAL_WAYPOINT_MSGS_MESSAGE_DOWAYPOINTNAVIGATIONGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pal_waypoint_msgs
{
template <class ContainerAllocator>
struct DoWaypointNavigationGoal_
{
  typedef DoWaypointNavigationGoal_<ContainerAllocator> Type;

  DoWaypointNavigationGoal_()
    : group()
    , first_wp(0)
    , num_wp(0)
    , continue_on_error(false)  {
    }
  DoWaypointNavigationGoal_(const ContainerAllocator& _alloc)
    : group(_alloc)
    , first_wp(0)
    , num_wp(0)
    , continue_on_error(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _group_type;
  _group_type group;

   typedef uint32_t _first_wp_type;
  _first_wp_type first_wp;

   typedef int32_t _num_wp_type;
  _num_wp_type num_wp;

   typedef uint8_t _continue_on_error_type;
  _continue_on_error_type continue_on_error;





  typedef boost::shared_ptr< ::pal_waypoint_msgs::DoWaypointNavigationGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pal_waypoint_msgs::DoWaypointNavigationGoal_<ContainerAllocator> const> ConstPtr;

}; // struct DoWaypointNavigationGoal_

typedef ::pal_waypoint_msgs::DoWaypointNavigationGoal_<std::allocator<void> > DoWaypointNavigationGoal;

typedef boost::shared_ptr< ::pal_waypoint_msgs::DoWaypointNavigationGoal > DoWaypointNavigationGoalPtr;
typedef boost::shared_ptr< ::pal_waypoint_msgs::DoWaypointNavigationGoal const> DoWaypointNavigationGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pal_waypoint_msgs::DoWaypointNavigationGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pal_waypoint_msgs::DoWaypointNavigationGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pal_waypoint_msgs::DoWaypointNavigationGoal_<ContainerAllocator1> & lhs, const ::pal_waypoint_msgs::DoWaypointNavigationGoal_<ContainerAllocator2> & rhs)
{
  return lhs.group == rhs.group &&
    lhs.first_wp == rhs.first_wp &&
    lhs.num_wp == rhs.num_wp &&
    lhs.continue_on_error == rhs.continue_on_error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pal_waypoint_msgs::DoWaypointNavigationGoal_<ContainerAllocator1> & lhs, const ::pal_waypoint_msgs::DoWaypointNavigationGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pal_waypoint_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pal_waypoint_msgs::DoWaypointNavigationGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pal_waypoint_msgs::DoWaypointNavigationGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_waypoint_msgs::DoWaypointNavigationGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_waypoint_msgs::DoWaypointNavigationGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_waypoint_msgs::DoWaypointNavigationGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_waypoint_msgs::DoWaypointNavigationGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pal_waypoint_msgs::DoWaypointNavigationGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "61b2209700297362573013f901409437";
  }

  static const char* value(const ::pal_waypoint_msgs::DoWaypointNavigationGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x61b2209700297362ULL;
  static const uint64_t static_value2 = 0x573013f901409437ULL;
};

template<class ContainerAllocator>
struct DataType< ::pal_waypoint_msgs::DoWaypointNavigationGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pal_waypoint_msgs/DoWaypointNavigationGoal";
  }

  static const char* value(const ::pal_waypoint_msgs::DoWaypointNavigationGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pal_waypoint_msgs::DoWaypointNavigationGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Group of the waypoints\n"
"string group\n"
"\n"
"# Start navigation from first_wp\n"
"uint32 first_wp\n"
"\n"
"# Number of waypoints to visit, 0 means all \n"
"int32 num_wp\n"
"\n"
"#If a point in the waypoint group fails, ignore and continue to next one\n"
"bool continue_on_error\n"
;
  }

  static const char* value(const ::pal_waypoint_msgs::DoWaypointNavigationGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pal_waypoint_msgs::DoWaypointNavigationGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.group);
      stream.next(m.first_wp);
      stream.next(m.num_wp);
      stream.next(m.continue_on_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DoWaypointNavigationGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pal_waypoint_msgs::DoWaypointNavigationGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pal_waypoint_msgs::DoWaypointNavigationGoal_<ContainerAllocator>& v)
  {
    s << indent << "group: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.group);
    s << indent << "first_wp: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.first_wp);
    s << indent << "num_wp: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_wp);
    s << indent << "continue_on_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.continue_on_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PAL_WAYPOINT_MSGS_MESSAGE_DOWAYPOINTNAVIGATIONGOAL_H
