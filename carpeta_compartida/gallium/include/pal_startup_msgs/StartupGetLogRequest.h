// Generated by gencpp from file pal_startup_msgs/StartupGetLogRequest.msg
// DO NOT EDIT!


#ifndef PAL_STARTUP_MSGS_MESSAGE_STARTUPGETLOGREQUEST_H
#define PAL_STARTUP_MSGS_MESSAGE_STARTUPGETLOGREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pal_startup_msgs
{
template <class ContainerAllocator>
struct StartupGetLogRequest_
{
  typedef StartupGetLogRequest_<ContainerAllocator> Type;

  StartupGetLogRequest_()
    : app()
    , nlines(0)  {
    }
  StartupGetLogRequest_(const ContainerAllocator& _alloc)
    : app(_alloc)
    , nlines(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _app_type;
  _app_type app;

   typedef int32_t _nlines_type;
  _nlines_type nlines;





  typedef boost::shared_ptr< ::pal_startup_msgs::StartupGetLogRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pal_startup_msgs::StartupGetLogRequest_<ContainerAllocator> const> ConstPtr;

}; // struct StartupGetLogRequest_

typedef ::pal_startup_msgs::StartupGetLogRequest_<std::allocator<void> > StartupGetLogRequest;

typedef boost::shared_ptr< ::pal_startup_msgs::StartupGetLogRequest > StartupGetLogRequestPtr;
typedef boost::shared_ptr< ::pal_startup_msgs::StartupGetLogRequest const> StartupGetLogRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pal_startup_msgs::StartupGetLogRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pal_startup_msgs::StartupGetLogRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pal_startup_msgs::StartupGetLogRequest_<ContainerAllocator1> & lhs, const ::pal_startup_msgs::StartupGetLogRequest_<ContainerAllocator2> & rhs)
{
  return lhs.app == rhs.app &&
    lhs.nlines == rhs.nlines;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pal_startup_msgs::StartupGetLogRequest_<ContainerAllocator1> & lhs, const ::pal_startup_msgs::StartupGetLogRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pal_startup_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pal_startup_msgs::StartupGetLogRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pal_startup_msgs::StartupGetLogRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_startup_msgs::StartupGetLogRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_startup_msgs::StartupGetLogRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_startup_msgs::StartupGetLogRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_startup_msgs::StartupGetLogRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pal_startup_msgs::StartupGetLogRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6d53a05f3a13b77c91b7924d6279e1ee";
  }

  static const char* value(const ::pal_startup_msgs::StartupGetLogRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6d53a05f3a13b77cULL;
  static const uint64_t static_value2 = 0x91b7924d6279e1eeULL;
};

template<class ContainerAllocator>
struct DataType< ::pal_startup_msgs::StartupGetLogRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pal_startup_msgs/StartupGetLogRequest";
  }

  static const char* value(const ::pal_startup_msgs::StartupGetLogRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pal_startup_msgs::StartupGetLogRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Returns nlines last lines of app's log\n"
"string app\n"
"int32 nlines\n"
;
  }

  static const char* value(const ::pal_startup_msgs::StartupGetLogRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pal_startup_msgs::StartupGetLogRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.app);
      stream.next(m.nlines);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StartupGetLogRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pal_startup_msgs::StartupGetLogRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pal_startup_msgs::StartupGetLogRequest_<ContainerAllocator>& v)
  {
    s << indent << "app: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.app);
    s << indent << "nlines: ";
    Printer<int32_t>::stream(s, indent + "  ", v.nlines);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PAL_STARTUP_MSGS_MESSAGE_STARTUPGETLOGREQUEST_H
