// Generated by gencpp from file pal_startup_msgs/StartupStatus.msg
// DO NOT EDIT!


#ifndef PAL_STARTUP_MSGS_MESSAGE_STARTUPSTATUS_H
#define PAL_STARTUP_MSGS_MESSAGE_STARTUPSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pal_startup_msgs
{
template <class ContainerAllocator>
struct StartupStatus_
{
  typedef StartupStatus_<ContainerAllocator> Type;

  StartupStatus_()
    : name()
    , message()
    , status()
    , startup_id()  {
    }
  StartupStatus_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , message(_alloc)
    , status(_alloc)
    , startup_id(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type;
  _message_type message;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _status_type;
  _status_type status;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _startup_id_type;
  _startup_id_type startup_id;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(MISSING)
  #undef MISSING
#endif
#if defined(_WIN32) && defined(RUNNING)
  #undef RUNNING
#endif
#if defined(_WIN32) && defined(PENDING)
  #undef PENDING
#endif
#if defined(_WIN32) && defined(CRASHED)
  #undef CRASHED
#endif
#if defined(_WIN32) && defined(STOPPED)
  #undef STOPPED
#endif
#if defined(_WIN32) && defined(ABORTED)
  #undef ABORTED
#endif
#if defined(_WIN32) && defined(TIMEOUT)
  #undef TIMEOUT
#endif
#if defined(_WIN32) && defined(MANUAL)
  #undef MANUAL
#endif
#if defined(_WIN32) && defined(FINISHED)
  #undef FINISHED
#endif


  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> MISSING;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> RUNNING;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> PENDING;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> CRASHED;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> STOPPED;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> ABORTED;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> TIMEOUT;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> MANUAL;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> FINISHED;

  typedef boost::shared_ptr< ::pal_startup_msgs::StartupStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pal_startup_msgs::StartupStatus_<ContainerAllocator> const> ConstPtr;

}; // struct StartupStatus_

typedef ::pal_startup_msgs::StartupStatus_<std::allocator<void> > StartupStatus;

typedef boost::shared_ptr< ::pal_startup_msgs::StartupStatus > StartupStatusPtr;
typedef boost::shared_ptr< ::pal_startup_msgs::StartupStatus const> StartupStatusConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      StartupStatus_<ContainerAllocator>::MISSING =
        
          "Missing"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      StartupStatus_<ContainerAllocator>::RUNNING =
        
          "Running"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      StartupStatus_<ContainerAllocator>::PENDING =
        
          "Pending"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      StartupStatus_<ContainerAllocator>::CRASHED =
        
          "Crashed"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      StartupStatus_<ContainerAllocator>::STOPPED =
        
          "Stopped"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      StartupStatus_<ContainerAllocator>::ABORTED =
        
          "Aborted"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      StartupStatus_<ContainerAllocator>::TIMEOUT =
        
          "Timeout"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      StartupStatus_<ContainerAllocator>::MANUAL =
        
          "Manual"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      StartupStatus_<ContainerAllocator>::FINISHED =
        
          "Finished"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pal_startup_msgs::StartupStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pal_startup_msgs::StartupStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pal_startup_msgs::StartupStatus_<ContainerAllocator1> & lhs, const ::pal_startup_msgs::StartupStatus_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.message == rhs.message &&
    lhs.status == rhs.status &&
    lhs.startup_id == rhs.startup_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pal_startup_msgs::StartupStatus_<ContainerAllocator1> & lhs, const ::pal_startup_msgs::StartupStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pal_startup_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pal_startup_msgs::StartupStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pal_startup_msgs::StartupStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_startup_msgs::StartupStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_startup_msgs::StartupStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_startup_msgs::StartupStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_startup_msgs::StartupStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pal_startup_msgs::StartupStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ca78e8aec80203b6c29ca3e480879775";
  }

  static const char* value(const ::pal_startup_msgs::StartupStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xca78e8aec80203b6ULL;
  static const uint64_t static_value2 = 0xc29ca3e480879775ULL;
};

template<class ContainerAllocator>
struct DataType< ::pal_startup_msgs::StartupStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pal_startup_msgs/StartupStatus";
  }

  static const char* value(const ::pal_startup_msgs::StartupStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pal_startup_msgs::StartupStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name # application name\n"
"string message # description of the status if required\n"
"# Possible status of startup process\n"
"string MISSING=Missing\n"
"string RUNNING=Running\n"
"string PENDING=Pending\n"
"string CRASHED=Crashed\n"
"string STOPPED=Stopped\n"
"string ABORTED=Aborted\n"
"string TIMEOUT=Timeout\n"
"string MANUAL=Manual\n"
"string FINISHED=Finished\n"
"string status # status of the startup process for the application. Enumerated above \n"
"string startup_id # Id of the node starting the app (ie: control, multimedia)\n"
"\n"
;
  }

  static const char* value(const ::pal_startup_msgs::StartupStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pal_startup_msgs::StartupStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.message);
      stream.next(m.status);
      stream.next(m.startup_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StartupStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pal_startup_msgs::StartupStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pal_startup_msgs::StartupStatus_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message);
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.status);
    s << indent << "startup_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.startup_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PAL_STARTUP_MSGS_MESSAGE_STARTUPSTATUS_H
