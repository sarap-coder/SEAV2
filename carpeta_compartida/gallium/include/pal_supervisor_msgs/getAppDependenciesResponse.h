// Generated by gencpp from file pal_supervisor_msgs/getAppDependenciesResponse.msg
// DO NOT EDIT!


#ifndef PAL_SUPERVISOR_MSGS_MESSAGE_GETAPPDEPENDENCIESRESPONSE_H
#define PAL_SUPERVISOR_MSGS_MESSAGE_GETAPPDEPENDENCIESRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pal_supervisor_msgs/DependencyStatus.h>

namespace pal_supervisor_msgs
{
template <class ContainerAllocator>
struct getAppDependenciesResponse_
{
  typedef getAppDependenciesResponse_<ContainerAllocator> Type;

  getAppDependenciesResponse_()
    : dependencies()  {
    }
  getAppDependenciesResponse_(const ContainerAllocator& _alloc)
    : dependencies(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::pal_supervisor_msgs::DependencyStatus_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::pal_supervisor_msgs::DependencyStatus_<ContainerAllocator> >> _dependencies_type;
  _dependencies_type dependencies;





  typedef boost::shared_ptr< ::pal_supervisor_msgs::getAppDependenciesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pal_supervisor_msgs::getAppDependenciesResponse_<ContainerAllocator> const> ConstPtr;

}; // struct getAppDependenciesResponse_

typedef ::pal_supervisor_msgs::getAppDependenciesResponse_<std::allocator<void> > getAppDependenciesResponse;

typedef boost::shared_ptr< ::pal_supervisor_msgs::getAppDependenciesResponse > getAppDependenciesResponsePtr;
typedef boost::shared_ptr< ::pal_supervisor_msgs::getAppDependenciesResponse const> getAppDependenciesResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pal_supervisor_msgs::getAppDependenciesResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pal_supervisor_msgs::getAppDependenciesResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pal_supervisor_msgs::getAppDependenciesResponse_<ContainerAllocator1> & lhs, const ::pal_supervisor_msgs::getAppDependenciesResponse_<ContainerAllocator2> & rhs)
{
  return lhs.dependencies == rhs.dependencies;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pal_supervisor_msgs::getAppDependenciesResponse_<ContainerAllocator1> & lhs, const ::pal_supervisor_msgs::getAppDependenciesResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pal_supervisor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pal_supervisor_msgs::getAppDependenciesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pal_supervisor_msgs::getAppDependenciesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_supervisor_msgs::getAppDependenciesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_supervisor_msgs::getAppDependenciesResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_supervisor_msgs::getAppDependenciesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_supervisor_msgs::getAppDependenciesResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pal_supervisor_msgs::getAppDependenciesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3e7de1f5bb22d4fbea8623c3be335477";
  }

  static const char* value(const ::pal_supervisor_msgs::getAppDependenciesResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3e7de1f5bb22d4fbULL;
  static const uint64_t static_value2 = 0xea8623c3be335477ULL;
};

template<class ContainerAllocator>
struct DataType< ::pal_supervisor_msgs::getAppDependenciesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pal_supervisor_msgs/getAppDependenciesResponse";
  }

  static const char* value(const ::pal_supervisor_msgs::getAppDependenciesResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pal_supervisor_msgs::getAppDependenciesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pal_supervisor_msgs/DependencyStatus[] dependencies #Array of dependencies\n"
"\n"
"\n"
"================================================================================\n"
"MSG: pal_supervisor_msgs/DependencyStatus\n"
"string name # dependency name\n"
"# Possible levels of operations\n"
"byte OK=0\n"
"byte WARN=1\n"
"byte ERROR=2\n"
"byte STALE=3 #Application not running\n"
"byte level # level of operation enumerated above \n"
;
  }

  static const char* value(const ::pal_supervisor_msgs::getAppDependenciesResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pal_supervisor_msgs::getAppDependenciesResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dependencies);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct getAppDependenciesResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pal_supervisor_msgs::getAppDependenciesResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pal_supervisor_msgs::getAppDependenciesResponse_<ContainerAllocator>& v)
  {
    s << indent << "dependencies[]" << std::endl;
    for (size_t i = 0; i < v.dependencies.size(); ++i)
    {
      s << indent << "  dependencies[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::pal_supervisor_msgs::DependencyStatus_<ContainerAllocator> >::stream(s, indent + "    ", v.dependencies[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PAL_SUPERVISOR_MSGS_MESSAGE_GETAPPDEPENDENCIESRESPONSE_H
