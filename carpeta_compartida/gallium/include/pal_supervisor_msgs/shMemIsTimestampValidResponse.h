// Generated by gencpp from file pal_supervisor_msgs/shMemIsTimestampValidResponse.msg
// DO NOT EDIT!


#ifndef PAL_SUPERVISOR_MSGS_MESSAGE_SHMEMISTIMESTAMPVALIDRESPONSE_H
#define PAL_SUPERVISOR_MSGS_MESSAGE_SHMEMISTIMESTAMPVALIDRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pal_supervisor_msgs
{
template <class ContainerAllocator>
struct shMemIsTimestampValidResponse_
{
  typedef shMemIsTimestampValidResponse_<ContainerAllocator> Type;

  shMemIsTimestampValidResponse_()
    : isValid(false)  {
    }
  shMemIsTimestampValidResponse_(const ContainerAllocator& _alloc)
    : isValid(false)  {
  (void)_alloc;
    }



   typedef uint8_t _isValid_type;
  _isValid_type isValid;





  typedef boost::shared_ptr< ::pal_supervisor_msgs::shMemIsTimestampValidResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pal_supervisor_msgs::shMemIsTimestampValidResponse_<ContainerAllocator> const> ConstPtr;

}; // struct shMemIsTimestampValidResponse_

typedef ::pal_supervisor_msgs::shMemIsTimestampValidResponse_<std::allocator<void> > shMemIsTimestampValidResponse;

typedef boost::shared_ptr< ::pal_supervisor_msgs::shMemIsTimestampValidResponse > shMemIsTimestampValidResponsePtr;
typedef boost::shared_ptr< ::pal_supervisor_msgs::shMemIsTimestampValidResponse const> shMemIsTimestampValidResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pal_supervisor_msgs::shMemIsTimestampValidResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pal_supervisor_msgs::shMemIsTimestampValidResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pal_supervisor_msgs::shMemIsTimestampValidResponse_<ContainerAllocator1> & lhs, const ::pal_supervisor_msgs::shMemIsTimestampValidResponse_<ContainerAllocator2> & rhs)
{
  return lhs.isValid == rhs.isValid;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pal_supervisor_msgs::shMemIsTimestampValidResponse_<ContainerAllocator1> & lhs, const ::pal_supervisor_msgs::shMemIsTimestampValidResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pal_supervisor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pal_supervisor_msgs::shMemIsTimestampValidResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pal_supervisor_msgs::shMemIsTimestampValidResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_supervisor_msgs::shMemIsTimestampValidResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_supervisor_msgs::shMemIsTimestampValidResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_supervisor_msgs::shMemIsTimestampValidResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_supervisor_msgs::shMemIsTimestampValidResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pal_supervisor_msgs::shMemIsTimestampValidResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "708ef19af795518626307bebc19e81e8";
  }

  static const char* value(const ::pal_supervisor_msgs::shMemIsTimestampValidResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x708ef19af7955186ULL;
  static const uint64_t static_value2 = 0x26307bebc19e81e8ULL;
};

template<class ContainerAllocator>
struct DataType< ::pal_supervisor_msgs::shMemIsTimestampValidResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pal_supervisor_msgs/shMemIsTimestampValidResponse";
  }

  static const char* value(const ::pal_supervisor_msgs::shMemIsTimestampValidResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pal_supervisor_msgs::shMemIsTimestampValidResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool isValid #Returns if the timeout check is valid\n"
"\n"
;
  }

  static const char* value(const ::pal_supervisor_msgs::shMemIsTimestampValidResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pal_supervisor_msgs::shMemIsTimestampValidResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.isValid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct shMemIsTimestampValidResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pal_supervisor_msgs::shMemIsTimestampValidResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pal_supervisor_msgs::shMemIsTimestampValidResponse_<ContainerAllocator>& v)
  {
    s << indent << "isValid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isValid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PAL_SUPERVISOR_MSGS_MESSAGE_SHMEMISTIMESTAMPVALIDRESPONSE_H
