// Generated by gencpp from file pal_supervisor_msgs/isAppRunningResponse.msg
// DO NOT EDIT!


#ifndef PAL_SUPERVISOR_MSGS_MESSAGE_ISAPPRUNNINGRESPONSE_H
#define PAL_SUPERVISOR_MSGS_MESSAGE_ISAPPRUNNINGRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pal_supervisor_msgs
{
template <class ContainerAllocator>
struct isAppRunningResponse_
{
  typedef isAppRunningResponse_<ContainerAllocator> Type;

  isAppRunningResponse_()
    : level(0)  {
    }
  isAppRunningResponse_(const ContainerAllocator& _alloc)
    : level(0)  {
  (void)_alloc;
    }



   typedef int8_t _level_type;
  _level_type level;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(OK)
  #undef OK
#endif
#if defined(_WIN32) && defined(WARN)
  #undef WARN
#endif
#if defined(_WIN32) && defined(ERROR)
  #undef ERROR
#endif
#if defined(_WIN32) && defined(STALE)
  #undef STALE
#endif

  enum {
    OK = 0,
    WARN = 1,
    ERROR = 2,
    STALE = 3,
  };


  typedef boost::shared_ptr< ::pal_supervisor_msgs::isAppRunningResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pal_supervisor_msgs::isAppRunningResponse_<ContainerAllocator> const> ConstPtr;

}; // struct isAppRunningResponse_

typedef ::pal_supervisor_msgs::isAppRunningResponse_<std::allocator<void> > isAppRunningResponse;

typedef boost::shared_ptr< ::pal_supervisor_msgs::isAppRunningResponse > isAppRunningResponsePtr;
typedef boost::shared_ptr< ::pal_supervisor_msgs::isAppRunningResponse const> isAppRunningResponseConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pal_supervisor_msgs::isAppRunningResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pal_supervisor_msgs::isAppRunningResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pal_supervisor_msgs::isAppRunningResponse_<ContainerAllocator1> & lhs, const ::pal_supervisor_msgs::isAppRunningResponse_<ContainerAllocator2> & rhs)
{
  return lhs.level == rhs.level;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pal_supervisor_msgs::isAppRunningResponse_<ContainerAllocator1> & lhs, const ::pal_supervisor_msgs::isAppRunningResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pal_supervisor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pal_supervisor_msgs::isAppRunningResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pal_supervisor_msgs::isAppRunningResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_supervisor_msgs::isAppRunningResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_supervisor_msgs::isAppRunningResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_supervisor_msgs::isAppRunningResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_supervisor_msgs::isAppRunningResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pal_supervisor_msgs::isAppRunningResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fb91b3454e0e83a8c6444cd979e78581";
  }

  static const char* value(const ::pal_supervisor_msgs::isAppRunningResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfb91b3454e0e83a8ULL;
  static const uint64_t static_value2 = 0xc6444cd979e78581ULL;
};

template<class ContainerAllocator>
struct DataType< ::pal_supervisor_msgs::isAppRunningResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pal_supervisor_msgs/isAppRunningResponse";
  }

  static const char* value(const ::pal_supervisor_msgs::isAppRunningResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pal_supervisor_msgs::isAppRunningResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Possible levels of operations\n"
"byte OK=0\n"
"byte WARN=1\n"
"byte ERROR=2\n"
"byte STALE=3 #Application not running\n"
"byte level # level of operation enumerated above \n"
"\n"
;
  }

  static const char* value(const ::pal_supervisor_msgs::isAppRunningResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pal_supervisor_msgs::isAppRunningResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.level);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct isAppRunningResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pal_supervisor_msgs::isAppRunningResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pal_supervisor_msgs::isAppRunningResponse_<ContainerAllocator>& v)
  {
    s << indent << "level: ";
    Printer<int8_t>::stream(s, indent + "  ", v.level);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PAL_SUPERVISOR_MSGS_MESSAGE_ISAPPRUNNINGRESPONSE_H
