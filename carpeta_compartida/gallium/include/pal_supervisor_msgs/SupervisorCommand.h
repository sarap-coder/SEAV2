// Generated by gencpp from file pal_supervisor_msgs/SupervisorCommand.msg
// DO NOT EDIT!


#ifndef PAL_SUPERVISOR_MSGS_MESSAGE_SUPERVISORCOMMAND_H
#define PAL_SUPERVISOR_MSGS_MESSAGE_SUPERVISORCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pal_supervisor_msgs/Parameter.h>

namespace pal_supervisor_msgs
{
template <class ContainerAllocator>
struct SupervisorCommand_
{
  typedef SupervisorCommand_<ContainerAllocator> Type;

  SupervisorCommand_()
    : name()
    , params()  {
    }
  SupervisorCommand_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , params(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::vector< ::pal_supervisor_msgs::Parameter_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::pal_supervisor_msgs::Parameter_<ContainerAllocator> >> _params_type;
  _params_type params;





  typedef boost::shared_ptr< ::pal_supervisor_msgs::SupervisorCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pal_supervisor_msgs::SupervisorCommand_<ContainerAllocator> const> ConstPtr;

}; // struct SupervisorCommand_

typedef ::pal_supervisor_msgs::SupervisorCommand_<std::allocator<void> > SupervisorCommand;

typedef boost::shared_ptr< ::pal_supervisor_msgs::SupervisorCommand > SupervisorCommandPtr;
typedef boost::shared_ptr< ::pal_supervisor_msgs::SupervisorCommand const> SupervisorCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pal_supervisor_msgs::SupervisorCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pal_supervisor_msgs::SupervisorCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pal_supervisor_msgs::SupervisorCommand_<ContainerAllocator1> & lhs, const ::pal_supervisor_msgs::SupervisorCommand_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.params == rhs.params;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pal_supervisor_msgs::SupervisorCommand_<ContainerAllocator1> & lhs, const ::pal_supervisor_msgs::SupervisorCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pal_supervisor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pal_supervisor_msgs::SupervisorCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pal_supervisor_msgs::SupervisorCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_supervisor_msgs::SupervisorCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_supervisor_msgs::SupervisorCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_supervisor_msgs::SupervisorCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_supervisor_msgs::SupervisorCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pal_supervisor_msgs::SupervisorCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9389508dd5191c710316e34d805a4c6c";
  }

  static const char* value(const ::pal_supervisor_msgs::SupervisorCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9389508dd5191c71ULL;
  static const uint64_t static_value2 = 0x0316e34d805a4c6cULL;
};

template<class ContainerAllocator>
struct DataType< ::pal_supervisor_msgs::SupervisorCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pal_supervisor_msgs/SupervisorCommand";
  }

  static const char* value(const ::pal_supervisor_msgs::SupervisorCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pal_supervisor_msgs::SupervisorCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name #Command name\n"
"pal_supervisor_msgs/Parameter[] params #Pairs of name and value, include all the parameters for the command\n"
"\n"
"================================================================================\n"
"MSG: pal_supervisor_msgs/Parameter\n"
"string name # parameter name\n"
"string value # value of the parameter, all non string types will be \"stringized\" if possible\n"
;
  }

  static const char* value(const ::pal_supervisor_msgs::SupervisorCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pal_supervisor_msgs::SupervisorCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.params);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SupervisorCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pal_supervisor_msgs::SupervisorCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pal_supervisor_msgs::SupervisorCommand_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "params[]" << std::endl;
    for (size_t i = 0; i < v.params.size(); ++i)
    {
      s << indent << "  params[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::pal_supervisor_msgs::Parameter_<ContainerAllocator> >::stream(s, indent + "    ", v.params[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PAL_SUPERVISOR_MSGS_MESSAGE_SUPERVISORCOMMAND_H
