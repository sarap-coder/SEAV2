// Generated by gencpp from file pal_supervisor_msgs/supervisorIsAvailableResponse.msg
// DO NOT EDIT!


#ifndef PAL_SUPERVISOR_MSGS_MESSAGE_SUPERVISORISAVAILABLERESPONSE_H
#define PAL_SUPERVISOR_MSGS_MESSAGE_SUPERVISORISAVAILABLERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pal_supervisor_msgs
{
template <class ContainerAllocator>
struct supervisorIsAvailableResponse_
{
  typedef supervisorIsAvailableResponse_<ContainerAllocator> Type;

  supervisorIsAvailableResponse_()
    : available(false)  {
    }
  supervisorIsAvailableResponse_(const ContainerAllocator& _alloc)
    : available(false)  {
  (void)_alloc;
    }



   typedef uint8_t _available_type;
  _available_type available;





  typedef boost::shared_ptr< ::pal_supervisor_msgs::supervisorIsAvailableResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pal_supervisor_msgs::supervisorIsAvailableResponse_<ContainerAllocator> const> ConstPtr;

}; // struct supervisorIsAvailableResponse_

typedef ::pal_supervisor_msgs::supervisorIsAvailableResponse_<std::allocator<void> > supervisorIsAvailableResponse;

typedef boost::shared_ptr< ::pal_supervisor_msgs::supervisorIsAvailableResponse > supervisorIsAvailableResponsePtr;
typedef boost::shared_ptr< ::pal_supervisor_msgs::supervisorIsAvailableResponse const> supervisorIsAvailableResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pal_supervisor_msgs::supervisorIsAvailableResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pal_supervisor_msgs::supervisorIsAvailableResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pal_supervisor_msgs::supervisorIsAvailableResponse_<ContainerAllocator1> & lhs, const ::pal_supervisor_msgs::supervisorIsAvailableResponse_<ContainerAllocator2> & rhs)
{
  return lhs.available == rhs.available;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pal_supervisor_msgs::supervisorIsAvailableResponse_<ContainerAllocator1> & lhs, const ::pal_supervisor_msgs::supervisorIsAvailableResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pal_supervisor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pal_supervisor_msgs::supervisorIsAvailableResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pal_supervisor_msgs::supervisorIsAvailableResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_supervisor_msgs::supervisorIsAvailableResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_supervisor_msgs::supervisorIsAvailableResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_supervisor_msgs::supervisorIsAvailableResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_supervisor_msgs::supervisorIsAvailableResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pal_supervisor_msgs::supervisorIsAvailableResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "efb9ac7739f299decb8575015d81760c";
  }

  static const char* value(const ::pal_supervisor_msgs::supervisorIsAvailableResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xefb9ac7739f299deULL;
  static const uint64_t static_value2 = 0xcb8575015d81760cULL;
};

template<class ContainerAllocator>
struct DataType< ::pal_supervisor_msgs::supervisorIsAvailableResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pal_supervisor_msgs/supervisorIsAvailableResponse";
  }

  static const char* value(const ::pal_supervisor_msgs::supervisorIsAvailableResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pal_supervisor_msgs::supervisorIsAvailableResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool available #True if the Supervisor is available, false if it's not\n"
"\n"
;
  }

  static const char* value(const ::pal_supervisor_msgs::supervisorIsAvailableResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pal_supervisor_msgs::supervisorIsAvailableResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.available);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct supervisorIsAvailableResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pal_supervisor_msgs::supervisorIsAvailableResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pal_supervisor_msgs::supervisorIsAvailableResponse_<ContainerAllocator>& v)
  {
    s << indent << "available: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.available);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PAL_SUPERVISOR_MSGS_MESSAGE_SUPERVISORISAVAILABLERESPONSE_H
