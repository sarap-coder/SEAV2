// Generated by gencpp from file pal_supervisor_msgs/numberOfAnomaliesResponse.msg
// DO NOT EDIT!


#ifndef PAL_SUPERVISOR_MSGS_MESSAGE_NUMBEROFANOMALIESRESPONSE_H
#define PAL_SUPERVISOR_MSGS_MESSAGE_NUMBEROFANOMALIESRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pal_supervisor_msgs
{
template <class ContainerAllocator>
struct numberOfAnomaliesResponse_
{
  typedef numberOfAnomaliesResponse_<ContainerAllocator> Type;

  numberOfAnomaliesResponse_()
    : numErrors(0)
    , numWarnings(0)  {
    }
  numberOfAnomaliesResponse_(const ContainerAllocator& _alloc)
    : numErrors(0)
    , numWarnings(0)  {
  (void)_alloc;
    }



   typedef int32_t _numErrors_type;
  _numErrors_type numErrors;

   typedef int32_t _numWarnings_type;
  _numWarnings_type numWarnings;





  typedef boost::shared_ptr< ::pal_supervisor_msgs::numberOfAnomaliesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pal_supervisor_msgs::numberOfAnomaliesResponse_<ContainerAllocator> const> ConstPtr;

}; // struct numberOfAnomaliesResponse_

typedef ::pal_supervisor_msgs::numberOfAnomaliesResponse_<std::allocator<void> > numberOfAnomaliesResponse;

typedef boost::shared_ptr< ::pal_supervisor_msgs::numberOfAnomaliesResponse > numberOfAnomaliesResponsePtr;
typedef boost::shared_ptr< ::pal_supervisor_msgs::numberOfAnomaliesResponse const> numberOfAnomaliesResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pal_supervisor_msgs::numberOfAnomaliesResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pal_supervisor_msgs::numberOfAnomaliesResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pal_supervisor_msgs::numberOfAnomaliesResponse_<ContainerAllocator1> & lhs, const ::pal_supervisor_msgs::numberOfAnomaliesResponse_<ContainerAllocator2> & rhs)
{
  return lhs.numErrors == rhs.numErrors &&
    lhs.numWarnings == rhs.numWarnings;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pal_supervisor_msgs::numberOfAnomaliesResponse_<ContainerAllocator1> & lhs, const ::pal_supervisor_msgs::numberOfAnomaliesResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pal_supervisor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pal_supervisor_msgs::numberOfAnomaliesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pal_supervisor_msgs::numberOfAnomaliesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_supervisor_msgs::numberOfAnomaliesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_supervisor_msgs::numberOfAnomaliesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_supervisor_msgs::numberOfAnomaliesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_supervisor_msgs::numberOfAnomaliesResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pal_supervisor_msgs::numberOfAnomaliesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "256e37138065fcef5d440c4ba2011920";
  }

  static const char* value(const ::pal_supervisor_msgs::numberOfAnomaliesResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x256e37138065fcefULL;
  static const uint64_t static_value2 = 0x5d440c4ba2011920ULL;
};

template<class ContainerAllocator>
struct DataType< ::pal_supervisor_msgs::numberOfAnomaliesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pal_supervisor_msgs/numberOfAnomaliesResponse";
  }

  static const char* value(const ::pal_supervisor_msgs::numberOfAnomaliesResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pal_supervisor_msgs::numberOfAnomaliesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 numErrors #Number of errors\n"
"int32 numWarnings #Number of warnings\n"
"\n"
;
  }

  static const char* value(const ::pal_supervisor_msgs::numberOfAnomaliesResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pal_supervisor_msgs::numberOfAnomaliesResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.numErrors);
      stream.next(m.numWarnings);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct numberOfAnomaliesResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pal_supervisor_msgs::numberOfAnomaliesResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pal_supervisor_msgs::numberOfAnomaliesResponse_<ContainerAllocator>& v)
  {
    s << indent << "numErrors: ";
    Printer<int32_t>::stream(s, indent + "  ", v.numErrors);
    s << indent << "numWarnings: ";
    Printer<int32_t>::stream(s, indent + "  ", v.numWarnings);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PAL_SUPERVISOR_MSGS_MESSAGE_NUMBEROFANOMALIESRESPONSE_H
