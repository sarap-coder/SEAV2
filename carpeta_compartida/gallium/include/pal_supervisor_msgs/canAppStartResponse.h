// Generated by gencpp from file pal_supervisor_msgs/canAppStartResponse.msg
// DO NOT EDIT!


#ifndef PAL_SUPERVISOR_MSGS_MESSAGE_CANAPPSTARTRESPONSE_H
#define PAL_SUPERVISOR_MSGS_MESSAGE_CANAPPSTARTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pal_supervisor_msgs
{
template <class ContainerAllocator>
struct canAppStartResponse_
{
  typedef canAppStartResponse_<ContainerAllocator> Type;

  canAppStartResponse_()
    : canStart(false)
    , description()  {
    }
  canAppStartResponse_(const ContainerAllocator& _alloc)
    : canStart(false)
    , description(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _canStart_type;
  _canStart_type canStart;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _description_type;
  _description_type description;





  typedef boost::shared_ptr< ::pal_supervisor_msgs::canAppStartResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pal_supervisor_msgs::canAppStartResponse_<ContainerAllocator> const> ConstPtr;

}; // struct canAppStartResponse_

typedef ::pal_supervisor_msgs::canAppStartResponse_<std::allocator<void> > canAppStartResponse;

typedef boost::shared_ptr< ::pal_supervisor_msgs::canAppStartResponse > canAppStartResponsePtr;
typedef boost::shared_ptr< ::pal_supervisor_msgs::canAppStartResponse const> canAppStartResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pal_supervisor_msgs::canAppStartResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pal_supervisor_msgs::canAppStartResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pal_supervisor_msgs::canAppStartResponse_<ContainerAllocator1> & lhs, const ::pal_supervisor_msgs::canAppStartResponse_<ContainerAllocator2> & rhs)
{
  return lhs.canStart == rhs.canStart &&
    lhs.description == rhs.description;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pal_supervisor_msgs::canAppStartResponse_<ContainerAllocator1> & lhs, const ::pal_supervisor_msgs::canAppStartResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pal_supervisor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pal_supervisor_msgs::canAppStartResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pal_supervisor_msgs::canAppStartResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_supervisor_msgs::canAppStartResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_supervisor_msgs::canAppStartResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_supervisor_msgs::canAppStartResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_supervisor_msgs::canAppStartResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pal_supervisor_msgs::canAppStartResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f7bff1133ecc80fd0c657d99b5dd8c67";
  }

  static const char* value(const ::pal_supervisor_msgs::canAppStartResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf7bff1133ecc80fdULL;
  static const uint64_t static_value2 = 0x0c657d99b5dd8c67ULL;
};

template<class ContainerAllocator>
struct DataType< ::pal_supervisor_msgs::canAppStartResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pal_supervisor_msgs/canAppStartResponse";
  }

  static const char* value(const ::pal_supervisor_msgs::canAppStartResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pal_supervisor_msgs::canAppStartResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool canStart #True if the application can start\n"
"string description  #Reason why an application can't start. empty if can start\n"
"\n"
;
  }

  static const char* value(const ::pal_supervisor_msgs::canAppStartResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pal_supervisor_msgs::canAppStartResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.canStart);
      stream.next(m.description);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct canAppStartResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pal_supervisor_msgs::canAppStartResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pal_supervisor_msgs::canAppStartResponse_<ContainerAllocator>& v)
  {
    s << indent << "canStart: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.canStart);
    s << indent << "description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.description);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PAL_SUPERVISOR_MSGS_MESSAGE_CANAPPSTARTRESPONSE_H
