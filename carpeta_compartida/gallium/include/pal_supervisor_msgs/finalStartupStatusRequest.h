// Generated by gencpp from file pal_supervisor_msgs/finalStartupStatusRequest.msg
// DO NOT EDIT!


#ifndef PAL_SUPERVISOR_MSGS_MESSAGE_FINALSTARTUPSTATUSREQUEST_H
#define PAL_SUPERVISOR_MSGS_MESSAGE_FINALSTARTUPSTATUSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pal_supervisor_msgs/StartupStatus.h>

namespace pal_supervisor_msgs
{
template <class ContainerAllocator>
struct finalStartupStatusRequest_
{
  typedef finalStartupStatusRequest_<ContainerAllocator> Type;

  finalStartupStatusRequest_()
    : status()  {
    }
  finalStartupStatusRequest_(const ContainerAllocator& _alloc)
    : status(_alloc)  {
  (void)_alloc;
    }



   typedef  ::pal_supervisor_msgs::StartupStatus_<ContainerAllocator>  _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::pal_supervisor_msgs::finalStartupStatusRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pal_supervisor_msgs::finalStartupStatusRequest_<ContainerAllocator> const> ConstPtr;

}; // struct finalStartupStatusRequest_

typedef ::pal_supervisor_msgs::finalStartupStatusRequest_<std::allocator<void> > finalStartupStatusRequest;

typedef boost::shared_ptr< ::pal_supervisor_msgs::finalStartupStatusRequest > finalStartupStatusRequestPtr;
typedef boost::shared_ptr< ::pal_supervisor_msgs::finalStartupStatusRequest const> finalStartupStatusRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pal_supervisor_msgs::finalStartupStatusRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pal_supervisor_msgs::finalStartupStatusRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pal_supervisor_msgs::finalStartupStatusRequest_<ContainerAllocator1> & lhs, const ::pal_supervisor_msgs::finalStartupStatusRequest_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pal_supervisor_msgs::finalStartupStatusRequest_<ContainerAllocator1> & lhs, const ::pal_supervisor_msgs::finalStartupStatusRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pal_supervisor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pal_supervisor_msgs::finalStartupStatusRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pal_supervisor_msgs::finalStartupStatusRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_supervisor_msgs::finalStartupStatusRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_supervisor_msgs::finalStartupStatusRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_supervisor_msgs::finalStartupStatusRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_supervisor_msgs::finalStartupStatusRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pal_supervisor_msgs::finalStartupStatusRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3fe91db533913eea244a861ae3cea188";
  }

  static const char* value(const ::pal_supervisor_msgs::finalStartupStatusRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3fe91db533913eeaULL;
  static const uint64_t static_value2 = 0x244a861ae3cea188ULL;
};

template<class ContainerAllocator>
struct DataType< ::pal_supervisor_msgs::finalStartupStatusRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pal_supervisor_msgs/finalStartupStatusRequest";
  }

  static const char* value(const ::pal_supervisor_msgs::finalStartupStatusRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pal_supervisor_msgs::finalStartupStatusRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Final status reported by startup launch script. This should be repeated by the supervisor forever\n"
"pal_supervisor_msgs/StartupStatus status\n"
"\n"
"================================================================================\n"
"MSG: pal_supervisor_msgs/StartupStatus\n"
"string name # application name\n"
"string message # description of the status if required\n"
"# Possible status of startup process\n"
"byte RUNNING=0\n"
"byte WAITING=1\n"
"byte TIMEOUT=2\n"
"byte ABORTED=3 #Application not running\n"
"byte status # status of the startup process for the application. Enumerated above \n"
"\n"
;
  }

  static const char* value(const ::pal_supervisor_msgs::finalStartupStatusRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pal_supervisor_msgs::finalStartupStatusRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct finalStartupStatusRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pal_supervisor_msgs::finalStartupStatusRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pal_supervisor_msgs::finalStartupStatusRequest_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    s << std::endl;
    Printer< ::pal_supervisor_msgs::StartupStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PAL_SUPERVISOR_MSGS_MESSAGE_FINALSTARTUPSTATUSREQUEST_H
