// Generated by gencpp from file pal_supervisor_msgs/StartupAction.msg
// DO NOT EDIT!


#ifndef PAL_SUPERVISOR_MSGS_MESSAGE_STARTUPACTION_H
#define PAL_SUPERVISOR_MSGS_MESSAGE_STARTUPACTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pal_supervisor_msgs
{
template <class ContainerAllocator>
struct StartupAction_
{
  typedef StartupAction_<ContainerAllocator> Type;

  StartupAction_()
    : name()
    , action(0)  {
    }
  StartupAction_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , action(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef int8_t _action_type;
  _action_type action;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(START)
  #undef START
#endif
#if defined(_WIN32) && defined(ABORT)
  #undef ABORT
#endif

  enum {
    START = 0,
    ABORT = 1,
  };


  typedef boost::shared_ptr< ::pal_supervisor_msgs::StartupAction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pal_supervisor_msgs::StartupAction_<ContainerAllocator> const> ConstPtr;

}; // struct StartupAction_

typedef ::pal_supervisor_msgs::StartupAction_<std::allocator<void> > StartupAction;

typedef boost::shared_ptr< ::pal_supervisor_msgs::StartupAction > StartupActionPtr;
typedef boost::shared_ptr< ::pal_supervisor_msgs::StartupAction const> StartupActionConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pal_supervisor_msgs::StartupAction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pal_supervisor_msgs::StartupAction_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pal_supervisor_msgs::StartupAction_<ContainerAllocator1> & lhs, const ::pal_supervisor_msgs::StartupAction_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.action == rhs.action;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pal_supervisor_msgs::StartupAction_<ContainerAllocator1> & lhs, const ::pal_supervisor_msgs::StartupAction_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pal_supervisor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pal_supervisor_msgs::StartupAction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pal_supervisor_msgs::StartupAction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_supervisor_msgs::StartupAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_supervisor_msgs::StartupAction_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_supervisor_msgs::StartupAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_supervisor_msgs::StartupAction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pal_supervisor_msgs::StartupAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c3b072b09f12c731c73300aff3335bc4";
  }

  static const char* value(const ::pal_supervisor_msgs::StartupAction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc3b072b09f12c731ULL;
  static const uint64_t static_value2 = 0xc73300aff3335bc4ULL;
};

template<class ContainerAllocator>
struct DataType< ::pal_supervisor_msgs::StartupAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pal_supervisor_msgs/StartupAction";
  }

  static const char* value(const ::pal_supervisor_msgs::StartupAction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pal_supervisor_msgs::StartupAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name # application name\n"
"# Possible status of startup process\n"
"byte START=0\n"
"byte ABORT=1\n"
"byte action # action to be done by startup process for the application. Enumerated above \n"
;
  }

  static const char* value(const ::pal_supervisor_msgs::StartupAction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pal_supervisor_msgs::StartupAction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.action);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StartupAction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pal_supervisor_msgs::StartupAction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pal_supervisor_msgs::StartupAction_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "action: ";
    Printer<int8_t>::stream(s, indent + "  ", v.action);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PAL_SUPERVISOR_MSGS_MESSAGE_STARTUPACTION_H
