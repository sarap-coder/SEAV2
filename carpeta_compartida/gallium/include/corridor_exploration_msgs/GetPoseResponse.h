// Generated by gencpp from file corridor_exploration_msgs/GetPoseResponse.msg
// DO NOT EDIT!


#ifndef CORRIDOR_EXPLORATION_MSGS_MESSAGE_GETPOSERESPONSE_H
#define CORRIDOR_EXPLORATION_MSGS_MESSAGE_GETPOSERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>
#include <std_msgs/String.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Bool.h>

namespace corridor_exploration_msgs
{
template <class ContainerAllocator>
struct GetPoseResponse_
{
  typedef GetPoseResponse_<ContainerAllocator> Type;

  GetPoseResponse_()
    : pose()
    , message()
    , is_open_space()
    , success()  {
    }
  GetPoseResponse_(const ContainerAllocator& _alloc)
    : pose(_alloc)
    , message(_alloc)
    , is_open_space(_alloc)
    , success(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::std_msgs::String_<ContainerAllocator>  _message_type;
  _message_type message;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _is_open_space_type;
  _is_open_space_type is_open_space;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _success_type;
  _success_type success;





  typedef boost::shared_ptr< ::corridor_exploration_msgs::GetPoseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::corridor_exploration_msgs::GetPoseResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetPoseResponse_

typedef ::corridor_exploration_msgs::GetPoseResponse_<std::allocator<void> > GetPoseResponse;

typedef boost::shared_ptr< ::corridor_exploration_msgs::GetPoseResponse > GetPoseResponsePtr;
typedef boost::shared_ptr< ::corridor_exploration_msgs::GetPoseResponse const> GetPoseResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::corridor_exploration_msgs::GetPoseResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::corridor_exploration_msgs::GetPoseResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::corridor_exploration_msgs::GetPoseResponse_<ContainerAllocator1> & lhs, const ::corridor_exploration_msgs::GetPoseResponse_<ContainerAllocator2> & rhs)
{
  return lhs.pose == rhs.pose &&
    lhs.message == rhs.message &&
    lhs.is_open_space == rhs.is_open_space &&
    lhs.success == rhs.success;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::corridor_exploration_msgs::GetPoseResponse_<ContainerAllocator1> & lhs, const ::corridor_exploration_msgs::GetPoseResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace corridor_exploration_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::corridor_exploration_msgs::GetPoseResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::corridor_exploration_msgs::GetPoseResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::corridor_exploration_msgs::GetPoseResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::corridor_exploration_msgs::GetPoseResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::corridor_exploration_msgs::GetPoseResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::corridor_exploration_msgs::GetPoseResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::corridor_exploration_msgs::GetPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7b1bc44cde491adf98b52b97258ecd11";
  }

  static const char* value(const ::corridor_exploration_msgs::GetPoseResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7b1bc44cde491adfULL;
  static const uint64_t static_value2 = 0x98b52b97258ecd11ULL;
};

template<class ContainerAllocator>
struct DataType< ::corridor_exploration_msgs::GetPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "corridor_exploration_msgs/GetPoseResponse";
  }

  static const char* value(const ::corridor_exploration_msgs::GetPoseResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::corridor_exploration_msgs::GetPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Response\n"
"\n"
"geometry_msgs/PoseStamped pose\n"
"std_msgs/String message\n"
"std_msgs/Bool is_open_space\n"
"std_msgs/Bool success\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
;
  }

  static const char* value(const ::corridor_exploration_msgs::GetPoseResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::corridor_exploration_msgs::GetPoseResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose);
      stream.next(m.message);
      stream.next(m.is_open_space);
      stream.next(m.success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetPoseResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::corridor_exploration_msgs::GetPoseResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::corridor_exploration_msgs::GetPoseResponse_<ContainerAllocator>& v)
  {
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "message: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.message);
    s << indent << "is_open_space: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.is_open_space);
    s << indent << "success: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CORRIDOR_EXPLORATION_MSGS_MESSAGE_GETPOSERESPONSE_H
