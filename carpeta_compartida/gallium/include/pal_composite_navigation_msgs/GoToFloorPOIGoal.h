// Generated by gencpp from file pal_composite_navigation_msgs/GoToFloorPOIGoal.msg
// DO NOT EDIT!


#ifndef PAL_COMPOSITE_NAVIGATION_MSGS_MESSAGE_GOTOFLOORPOIGOAL_H
#define PAL_COMPOSITE_NAVIGATION_MSGS_MESSAGE_GOTOFLOORPOIGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pal_composite_navigation_msgs
{
template <class ContainerAllocator>
struct GoToFloorPOIGoal_
{
  typedef GoToFloorPOIGoal_<ContainerAllocator> Type;

  GoToFloorPOIGoal_()
    : floor()
    , poi()
    , timeout()  {
    }
  GoToFloorPOIGoal_(const ContainerAllocator& _alloc)
    : floor(_alloc)
    , poi(_alloc)
    , timeout()  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _floor_type;
  _floor_type floor;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _poi_type;
  _poi_type poi;

   typedef ros::Duration _timeout_type;
  _timeout_type timeout;





  typedef boost::shared_ptr< ::pal_composite_navigation_msgs::GoToFloorPOIGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pal_composite_navigation_msgs::GoToFloorPOIGoal_<ContainerAllocator> const> ConstPtr;

}; // struct GoToFloorPOIGoal_

typedef ::pal_composite_navigation_msgs::GoToFloorPOIGoal_<std::allocator<void> > GoToFloorPOIGoal;

typedef boost::shared_ptr< ::pal_composite_navigation_msgs::GoToFloorPOIGoal > GoToFloorPOIGoalPtr;
typedef boost::shared_ptr< ::pal_composite_navigation_msgs::GoToFloorPOIGoal const> GoToFloorPOIGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pal_composite_navigation_msgs::GoToFloorPOIGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pal_composite_navigation_msgs::GoToFloorPOIGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pal_composite_navigation_msgs::GoToFloorPOIGoal_<ContainerAllocator1> & lhs, const ::pal_composite_navigation_msgs::GoToFloorPOIGoal_<ContainerAllocator2> & rhs)
{
  return lhs.floor == rhs.floor &&
    lhs.poi == rhs.poi &&
    lhs.timeout == rhs.timeout;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pal_composite_navigation_msgs::GoToFloorPOIGoal_<ContainerAllocator1> & lhs, const ::pal_composite_navigation_msgs::GoToFloorPOIGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pal_composite_navigation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pal_composite_navigation_msgs::GoToFloorPOIGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pal_composite_navigation_msgs::GoToFloorPOIGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_composite_navigation_msgs::GoToFloorPOIGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_composite_navigation_msgs::GoToFloorPOIGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_composite_navigation_msgs::GoToFloorPOIGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_composite_navigation_msgs::GoToFloorPOIGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pal_composite_navigation_msgs::GoToFloorPOIGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0a32ca4cb10e6201941dab34784fa2b7";
  }

  static const char* value(const ::pal_composite_navigation_msgs::GoToFloorPOIGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0a32ca4cb10e6201ULL;
  static const uint64_t static_value2 = 0x941dab34784fa2b7ULL;
};

template<class ContainerAllocator>
struct DataType< ::pal_composite_navigation_msgs::GoToFloorPOIGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pal_composite_navigation_msgs/GoToFloorPOIGoal";
  }

  static const char* value(const ::pal_composite_navigation_msgs::GoToFloorPOIGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pal_composite_navigation_msgs::GoToFloorPOIGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"string floor\n"
"string poi\n"
"duration timeout\n"
;
  }

  static const char* value(const ::pal_composite_navigation_msgs::GoToFloorPOIGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pal_composite_navigation_msgs::GoToFloorPOIGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.floor);
      stream.next(m.poi);
      stream.next(m.timeout);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GoToFloorPOIGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pal_composite_navigation_msgs::GoToFloorPOIGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pal_composite_navigation_msgs::GoToFloorPOIGoal_<ContainerAllocator>& v)
  {
    s << indent << "floor: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.floor);
    s << indent << "poi: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.poi);
    s << indent << "timeout: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.timeout);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PAL_COMPOSITE_NAVIGATION_MSGS_MESSAGE_GOTOFLOORPOIGOAL_H
