#!/bin/bash

set -e

usage()
{
    echo "Usage: $0"
    echo "Upgrades this system with the latest version of all packages."
    echo "  -h, --help                  This help"
    echo "  -y, --yes                   Don't ask for confirmation"
    echo "  -d, --debug                 Enable verbose (set -x)"
    echo "  --staging                   Upgrade to staging"
    echo "  --include-system-pkgs       Upgrade the pal system packages as well"
    echo "  --system-pkgs-only          Only upgrade the pal system packages"
    echo "  --keep-sources              Do not change the source url in the sources.list. This allows for a custom source list to be used"

}

confirmation()
{
    echo "Upgrading this system with the latest version of all packages."
    read -p "Do you want to continue? [y/N]" answer
    if [ "$answer" != "y" ]; then
        exit 1
    fi
}

system_pkg_confirmation()
{
    echo "Are you sure you want to upgrade the SYSTEM pkgs? This is not recommended"
    read -p "Do you want to continue? [y/N]" answer
    if [ "$answer" != "y" ]; then
        exit 1
    fi
}

keep_source_confirmation()
{
    echo "Are you sure you want to use packages from the current source ip? If the sources are configured incorrectly the robot won't be able to upgrade"
    read -p "Do you want to continue? [y/N]" answer
    if [ "$answer" != "y" ]; then
        exit 1
    fi
}


ask_confirmation="True"
use_staging=""
mount_point=""
debug_mode=""
system_pkgs_only=""
include_system_pkgs=""
keep_sources=""

# parse arguments
for i in "$@"
do
    case $i in
        -h|--help)
            usage
            exit 0
            ;;
        -y|--yes)
            ask_confirmation="False"
            ;;
        --staging)
            use_staging="use-staging"
            ;;
        --include-system-pkgs)
            include_system_pkgs="include-system-pkgs"
            ;;    
        --system-pkgs-only)
            system_pkgs_only="system-pkgs-only"
            ;;
        --keep-sources)
            keep_sources="keep-sources"
            ;;        
        -d|--debug)
            debug_mode="-d"
            set -x
            ;;
        -m=*|--mount=*)
            mount_point="${i#*=}"
            shift
            ;;
        *)
            # unknown option
            ;;
    esac
done

if [ "$EUID" -ne 0 ]; then
    echo "Please run as root."
    exit 1
fi

# pick the most recent pal distro
PAL_DISTRO=`ls /opt/pal/ | sort | tail -n 1`

if [ -z "$PAL_DISTRO" ]; then
    echo "ERROR: PAL_DISTRO environment variable is not defined."
    exit 1
fi

if [ "$ask_confirmation" = "True" ]; then
    confirmation
fi

if [ "$system_pkgs_only" = "system-pkgs-only" ] || [ "$include_system_pkgs" = "include-system-pkgs" ]; then
    system_pkg_confirmation
fi

if [ "$keep_sources" = "keep-sources" ]; then
    keep_source_confirmation
fi

export NOW=`date '+%F_%H-%M-%S'`

rw
# Remove all but 20 recent logs
pushd . > /dev/null
if [ -d "/var/log/upgrades/" ]
then
    cd /var/log/upgrades/
    ls -tp | grep -v '/$' | tail -n +21 | xargs -d '\n' -r rm --
else
    mkdir /var/log/upgrades
fi
popd > /dev/null

chroot /ro /opt/pal/$PAL_DISTRO/lib/pal_debian_utils/pal_upgrade_chroot.sh $use_staging -m=$mount_point $debug_mode $include_system_pkgs $system_pkgs_only $keep_sources | tee /var/log/upgrades/pal_upgrade_$NOW.log

ro
