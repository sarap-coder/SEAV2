## *********************************************************
##
## File autogenerated for the pal_map_utils package
## by the dynamic_reconfigure package.
## Please do not edit.
##
## ********************************************************/

from dynamic_reconfigure.encoding import extract_params

inf = float('inf')

config_description = {'name': 'Default', 'type': '', 'state': True, 'cstate': 'true', 'id': 0, 'parent': 0, 'parameters': [{'name': 'ABSOLUTE_MAP_SCORE', 'type': 'double', 'default': 0.3, 'level': 0, 'description': 'Minimun score required to have a match between two features', 'min': 0.0, 'max': 1.0, 'srcline': 291, 'srcfile': '/opt/pal/gallium/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'edit_method': '', 'ctype': 'double', 'cconsttype': 'const double'}, {'name': 'MINIMUM_CORNER_SIDE', 'type': 'int', 'default': 50, 'level': 0, 'description': 'Minimum number of pixel to consider an edge as an edge of a corner', 'min': 0, 'max': 100, 'srcline': 291, 'srcfile': '/opt/pal/gallium/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'edit_method': '', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'ERRX', 'type': 'double', 'default': 12.0, 'level': 0, 'description': 'Maximum error allowed on x for the computed transofmation', 'min': 0.0, 'max': 100.0, 'srcline': 291, 'srcfile': '/opt/pal/gallium/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'edit_method': '', 'ctype': 'double', 'cconsttype': 'const double'}, {'name': 'ERRY', 'type': 'double', 'default': 12.0, 'level': 0, 'description': 'Maximum error allowed on y for the computed transofmation', 'min': 0.0, 'max': 100.0, 'srcline': 291, 'srcfile': '/opt/pal/gallium/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'edit_method': '', 'ctype': 'double', 'cconsttype': 'const double'}, {'name': 'ERRTHETA', 'type': 'double', 'default': 0.5235987755982988, 'level': 0, 'description': 'Maximum error allowed on theta for the computed transofmation', 'min': 0.0, 'max': 6.283185307179586, 'srcline': 291, 'srcfile': '/opt/pal/gallium/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'edit_method': '', 'ctype': 'double', 'cconsttype': 'const double'}, {'name': 'SCALE_CROP_POLY', 'type': 'double', 'default': 1.0, 'level': 0, 'description': 'Factor scale for intersection polygon between two submaps', 'min': 1.0, 'max': 10.0, 'srcline': 291, 'srcfile': '/opt/pal/gallium/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'edit_method': '', 'ctype': 'double', 'cconsttype': 'const double'}, {'name': 'MAP_AREA_THS', 'type': 'double', 'default': 0.3, 'level': 0, 'description': 'Minimum common area required to search for feature between two submaps', 'min': 0.0, 'max': 1.0, 'srcline': 291, 'srcfile': '/opt/pal/gallium/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'edit_method': '', 'ctype': 'double', 'cconsttype': 'const double'}, {'name': 'BORDER_PIXELS', 'type': 'int', 'default': 5, 'level': 0, 'description': 'Number of extra pixels considered for search for intersection', 'min': 0, 'max': 100, 'srcline': 291, 'srcfile': '/opt/pal/gallium/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'edit_method': '', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'SUPERVISED_FEATURE_AND_MATCHING', 'type': 'bool', 'default': False, 'level': 0, 'description': 'If true the feature are manually selected', 'min': False, 'max': True, 'srcline': 291, 'srcfile': '/opt/pal/gallium/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'edit_method': '', 'ctype': 'bool', 'cconsttype': 'const bool'}], 'groups': [], 'srcline': 246, 'srcfile': '/opt/pal/gallium/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'class': 'DEFAULT', 'parentclass': '', 'parentname': 'Default', 'field': 'default', 'upper': 'DEFAULT', 'lower': 'groups'}

min = {}
max = {}
defaults = {}
level = {}
type = {}
all_level = 0

#def extract_params(config):
#    params = []
#    params.extend(config['parameters'])
#    for group in config['groups']:
#        params.extend(extract_params(group))
#    return params

for param in extract_params(config_description):
    min[param['name']] = param['min']
    max[param['name']] = param['max']
    defaults[param['name']] = param['default']
    level[param['name']] = param['level']
    type[param['name']] = param['type']
    all_level = all_level | param['level']

