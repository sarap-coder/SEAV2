# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mm11_msgs/SetStripAnimationRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetStripAnimationRequest(genpy.Message):
  _md5sum = "d1648b64d1990c75ff0a58f1ddcbf68a"
  _type = "mm11_msgs/SetStripAnimationRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Animate a whole strip

uint8 port

uint8 animation_id

int16 param_1
uint16 param_2

uint8 r_1
uint8 g_1
uint8 b_1

uint8 r_2
uint8 g_2
uint8 b_2

"""
  __slots__ = ['port','animation_id','param_1','param_2','r_1','g_1','b_1','r_2','g_2','b_2']
  _slot_types = ['uint8','uint8','int16','uint16','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       port,animation_id,param_1,param_2,r_1,g_1,b_1,r_2,g_2,b_2

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetStripAnimationRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.port is None:
        self.port = 0
      if self.animation_id is None:
        self.animation_id = 0
      if self.param_1 is None:
        self.param_1 = 0
      if self.param_2 is None:
        self.param_2 = 0
      if self.r_1 is None:
        self.r_1 = 0
      if self.g_1 is None:
        self.g_1 = 0
      if self.b_1 is None:
        self.b_1 = 0
      if self.r_2 is None:
        self.r_2 = 0
      if self.g_2 is None:
        self.g_2 = 0
      if self.b_2 is None:
        self.b_2 = 0
    else:
      self.port = 0
      self.animation_id = 0
      self.param_1 = 0
      self.param_2 = 0
      self.r_1 = 0
      self.g_1 = 0
      self.b_1 = 0
      self.r_2 = 0
      self.g_2 = 0
      self.b_2 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2BhH6B().pack(_x.port, _x.animation_id, _x.param_1, _x.param_2, _x.r_1, _x.g_1, _x.b_1, _x.r_2, _x.g_2, _x.b_2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.port, _x.animation_id, _x.param_1, _x.param_2, _x.r_1, _x.g_1, _x.b_1, _x.r_2, _x.g_2, _x.b_2,) = _get_struct_2BhH6B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2BhH6B().pack(_x.port, _x.animation_id, _x.param_1, _x.param_2, _x.r_1, _x.g_1, _x.b_1, _x.r_2, _x.g_2, _x.b_2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.port, _x.animation_id, _x.param_1, _x.param_2, _x.r_1, _x.g_1, _x.b_1, _x.r_2, _x.g_2, _x.b_2,) = _get_struct_2BhH6B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2BhH6B = None
def _get_struct_2BhH6B():
    global _struct_2BhH6B
    if _struct_2BhH6B is None:
        _struct_2BhH6B = struct.Struct("<2BhH6B")
    return _struct_2BhH6B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mm11_msgs/SetStripAnimationResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetStripAnimationResponse(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "mm11_msgs/SetStripAnimationResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetStripAnimationResponse, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
class SetStripAnimation(object):
  _type          = 'mm11_msgs/SetStripAnimation'
  _md5sum = 'd1648b64d1990c75ff0a58f1ddcbf68a'
  _request_class  = SetStripAnimationRequest
  _response_class = SetStripAnimationResponse
