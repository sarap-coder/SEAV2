# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mm11_msgs/DisplayGoal.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mm11_msgs.msg

class DisplayGoal(genpy.Message):
  _md5sum = "36f0c5541bca204fe564a6a8a4759722"
  _type = "mm11_msgs/DisplayGoal"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
uint8 PIN_SCREEN=0
uint8 SCREEN_SAVER=1
uint8 MENU_SCREEN=2
uint8 CALIBRATION_SCREEN=3
uint8 TEST_SCREEN=4

uint8 screen_type
DisplayEntry[] entries

================================================================================
MSG: mm11_msgs/DisplayEntry
uint8 BUTTON=0
uint8 LABEL=1

# LABEL or BUTTON
uint8 type
# label or button text
string text
"""
  # Pseudo-constants
  PIN_SCREEN = 0
  SCREEN_SAVER = 1
  MENU_SCREEN = 2
  CALIBRATION_SCREEN = 3
  TEST_SCREEN = 4

  __slots__ = ['screen_type','entries']
  _slot_types = ['uint8','mm11_msgs/DisplayEntry[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       screen_type,entries

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DisplayGoal, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.screen_type is None:
        self.screen_type = 0
      if self.entries is None:
        self.entries = []
    else:
      self.screen_type = 0
      self.entries = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.screen_type
      buff.write(_get_struct_B().pack(_x))
      length = len(self.entries)
      buff.write(_struct_I.pack(length))
      for val1 in self.entries:
        _x = val1.type
        buff.write(_get_struct_B().pack(_x))
        _x = val1.text
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.entries is None:
        self.entries = None
      end = 0
      start = end
      end += 1
      (self.screen_type,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.entries = []
      for i in range(0, length):
        val1 = mm11_msgs.msg.DisplayEntry()
        start = end
        end += 1
        (val1.type,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.text = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.text = str[start:end]
        self.entries.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.screen_type
      buff.write(_get_struct_B().pack(_x))
      length = len(self.entries)
      buff.write(_struct_I.pack(length))
      for val1 in self.entries:
        _x = val1.type
        buff.write(_get_struct_B().pack(_x))
        _x = val1.text
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.entries is None:
        self.entries = None
      end = 0
      start = end
      end += 1
      (self.screen_type,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.entries = []
      for i in range(0, length):
        val1 = mm11_msgs.msg.DisplayEntry()
        start = end
        end += 1
        (val1.type,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.text = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.text = str[start:end]
        self.entries.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
