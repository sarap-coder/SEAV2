# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pal_pcl/ComputeTransformRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ComputeTransformRequest(genpy.Message):
  _md5sum = "81474f94945a292f8b2d7b128ce4473e"
  _type = "pal_pcl/ComputeTransformRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string camera_topic
string optical_frame
string camera_frame
float64 max_dist
"""
  __slots__ = ['camera_topic','optical_frame','camera_frame','max_dist']
  _slot_types = ['string','string','string','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       camera_topic,optical_frame,camera_frame,max_dist

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ComputeTransformRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.camera_topic is None:
        self.camera_topic = ''
      if self.optical_frame is None:
        self.optical_frame = ''
      if self.camera_frame is None:
        self.camera_frame = ''
      if self.max_dist is None:
        self.max_dist = 0.
    else:
      self.camera_topic = ''
      self.optical_frame = ''
      self.camera_frame = ''
      self.max_dist = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.camera_topic
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.optical_frame
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.camera_frame
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.max_dist
      buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_topic = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.camera_topic = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.optical_frame = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.optical_frame = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_frame = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.camera_frame = str[start:end]
      start = end
      end += 8
      (self.max_dist,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.camera_topic
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.optical_frame
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.camera_frame
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.max_dist
      buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_topic = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.camera_topic = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.optical_frame = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.optical_frame = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_frame = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.camera_frame = str[start:end]
      start = end
      end += 8
      (self.max_dist,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pal_pcl/ComputeTransformResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ComputeTransformResponse(genpy.Message):
  _md5sum = "77036f6b3c69064f401b263d7460c09d"
  _type = "pal_pcl/ComputeTransformResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 height
float64 height_error
float64 roll
float64 roll_error
float64 pitch
float64 pitch_error
bool error

"""
  __slots__ = ['height','height_error','roll','roll_error','pitch','pitch_error','error']
  _slot_types = ['float64','float64','float64','float64','float64','float64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       height,height_error,roll,roll_error,pitch,pitch_error,error

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ComputeTransformResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.height is None:
        self.height = 0.
      if self.height_error is None:
        self.height_error = 0.
      if self.roll is None:
        self.roll = 0.
      if self.roll_error is None:
        self.roll_error = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.pitch_error is None:
        self.pitch_error = 0.
      if self.error is None:
        self.error = False
    else:
      self.height = 0.
      self.height_error = 0.
      self.roll = 0.
      self.roll_error = 0.
      self.pitch = 0.
      self.pitch_error = 0.
      self.error = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6dB().pack(_x.height, _x.height_error, _x.roll, _x.roll_error, _x.pitch, _x.pitch_error, _x.error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 49
      (_x.height, _x.height_error, _x.roll, _x.roll_error, _x.pitch, _x.pitch_error, _x.error,) = _get_struct_6dB().unpack(str[start:end])
      self.error = bool(self.error)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6dB().pack(_x.height, _x.height_error, _x.roll, _x.roll_error, _x.pitch, _x.pitch_error, _x.error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 49
      (_x.height, _x.height_error, _x.roll, _x.roll_error, _x.pitch, _x.pitch_error, _x.error,) = _get_struct_6dB().unpack(str[start:end])
      self.error = bool(self.error)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6dB = None
def _get_struct_6dB():
    global _struct_6dB
    if _struct_6dB is None:
        _struct_6dB = struct.Struct("<6dB")
    return _struct_6dB
class ComputeTransform(object):
  _type          = 'pal_pcl/ComputeTransform'
  _md5sum = '63c14dea37df6909b0547d1d22800cc9'
  _request_class  = ComputeTransformRequest
  _response_class = ComputeTransformResponse
