// Auto-generated. Do not edit!

// (in-package mm11_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let DisplayEntry = require('./DisplayEntry.js');

//-----------------------------------------------------------

class DisplayGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.screen_type = null;
      this.entries = null;
    }
    else {
      if (initObj.hasOwnProperty('screen_type')) {
        this.screen_type = initObj.screen_type
      }
      else {
        this.screen_type = 0;
      }
      if (initObj.hasOwnProperty('entries')) {
        this.entries = initObj.entries
      }
      else {
        this.entries = [];
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type DisplayGoal
    // Serialize message field [screen_type]
    bufferOffset = _serializer.uint8(obj.screen_type, buffer, bufferOffset);
    // Serialize message field [entries]
    // Serialize the length for message field [entries]
    bufferOffset = _serializer.uint32(obj.entries.length, buffer, bufferOffset);
    obj.entries.forEach((val) => {
      bufferOffset = DisplayEntry.serialize(val, buffer, bufferOffset);
    });
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type DisplayGoal
    let len;
    let data = new DisplayGoal(null);
    // Deserialize message field [screen_type]
    data.screen_type = _deserializer.uint8(buffer, bufferOffset);
    // Deserialize message field [entries]
    // Deserialize array length for message field [entries]
    len = _deserializer.uint32(buffer, bufferOffset);
    data.entries = new Array(len);
    for (let i = 0; i < len; ++i) {
      data.entries[i] = DisplayEntry.deserialize(buffer, bufferOffset)
    }
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    object.entries.forEach((val) => {
      length += DisplayEntry.getMessageSize(val);
    });
    return length + 5;
  }

  static datatype() {
    // Returns string type for a message object
    return 'mm11_msgs/DisplayGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '36f0c5541bca204fe564a6a8a4759722';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #goal definition
    uint8 PIN_SCREEN=0
    uint8 SCREEN_SAVER=1
    uint8 MENU_SCREEN=2
    uint8 CALIBRATION_SCREEN=3
    uint8 TEST_SCREEN=4
    
    uint8 screen_type
    DisplayEntry[] entries
    
    ================================================================================
    MSG: mm11_msgs/DisplayEntry
    uint8 BUTTON=0
    uint8 LABEL=1
    
    # LABEL or BUTTON
    uint8 type
    # label or button text
    string text
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new DisplayGoal(null);
    if (msg.screen_type !== undefined) {
      resolved.screen_type = msg.screen_type;
    }
    else {
      resolved.screen_type = 0
    }

    if (msg.entries !== undefined) {
      resolved.entries = new Array(msg.entries.length);
      for (let i = 0; i < resolved.entries.length; ++i) {
        resolved.entries[i] = DisplayEntry.Resolve(msg.entries[i]);
      }
    }
    else {
      resolved.entries = []
    }

    return resolved;
    }
};

// Constants for message
DisplayGoal.Constants = {
  PIN_SCREEN: 0,
  SCREEN_SAVER: 1,
  MENU_SCREEN: 2,
  CALIBRATION_SCREEN: 3,
  TEST_SCREEN: 4,
}

module.exports = DisplayGoal;
