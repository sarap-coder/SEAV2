// Auto-generated. Do not edit!

// (in-package pal_waypoint_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class DoWaypointNavigationGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.group = null;
      this.first_wp = null;
      this.num_wp = null;
      this.continue_on_error = null;
    }
    else {
      if (initObj.hasOwnProperty('group')) {
        this.group = initObj.group
      }
      else {
        this.group = '';
      }
      if (initObj.hasOwnProperty('first_wp')) {
        this.first_wp = initObj.first_wp
      }
      else {
        this.first_wp = 0;
      }
      if (initObj.hasOwnProperty('num_wp')) {
        this.num_wp = initObj.num_wp
      }
      else {
        this.num_wp = 0;
      }
      if (initObj.hasOwnProperty('continue_on_error')) {
        this.continue_on_error = initObj.continue_on_error
      }
      else {
        this.continue_on_error = false;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type DoWaypointNavigationGoal
    // Serialize message field [group]
    bufferOffset = _serializer.string(obj.group, buffer, bufferOffset);
    // Serialize message field [first_wp]
    bufferOffset = _serializer.uint32(obj.first_wp, buffer, bufferOffset);
    // Serialize message field [num_wp]
    bufferOffset = _serializer.int32(obj.num_wp, buffer, bufferOffset);
    // Serialize message field [continue_on_error]
    bufferOffset = _serializer.bool(obj.continue_on_error, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type DoWaypointNavigationGoal
    let len;
    let data = new DoWaypointNavigationGoal(null);
    // Deserialize message field [group]
    data.group = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [first_wp]
    data.first_wp = _deserializer.uint32(buffer, bufferOffset);
    // Deserialize message field [num_wp]
    data.num_wp = _deserializer.int32(buffer, bufferOffset);
    // Deserialize message field [continue_on_error]
    data.continue_on_error = _deserializer.bool(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += _getByteLength(object.group);
    return length + 13;
  }

  static datatype() {
    // Returns string type for a message object
    return 'pal_waypoint_msgs/DoWaypointNavigationGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '61b2209700297362573013f901409437';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Group of the waypoints
    string group
    
    # Start navigation from first_wp
    uint32 first_wp
    
    # Number of waypoints to visit, 0 means all 
    int32 num_wp
    
    #If a point in the waypoint group fails, ignore and continue to next one
    bool continue_on_error
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new DoWaypointNavigationGoal(null);
    if (msg.group !== undefined) {
      resolved.group = msg.group;
    }
    else {
      resolved.group = ''
    }

    if (msg.first_wp !== undefined) {
      resolved.first_wp = msg.first_wp;
    }
    else {
      resolved.first_wp = 0
    }

    if (msg.num_wp !== undefined) {
      resolved.num_wp = msg.num_wp;
    }
    else {
      resolved.num_wp = 0
    }

    if (msg.continue_on_error !== undefined) {
      resolved.continue_on_error = msg.continue_on_error;
    }
    else {
      resolved.continue_on_error = false
    }

    return resolved;
    }
};

module.exports = DoWaypointNavigationGoal;
