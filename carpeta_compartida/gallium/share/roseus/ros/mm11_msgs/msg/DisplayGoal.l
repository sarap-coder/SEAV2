;; Auto-generated. Do not edit!


(when (boundp 'mm11_msgs::DisplayGoal)
  (if (not (find-package "MM11_MSGS"))
    (make-package "MM11_MSGS"))
  (shadow 'DisplayGoal (find-package "MM11_MSGS")))
(unless (find-package "MM11_MSGS::DISPLAYGOAL")
  (make-package "MM11_MSGS::DISPLAYGOAL"))

(in-package "ROS")
;;//! \htmlinclude DisplayGoal.msg.html


(intern "*PIN_SCREEN*" (find-package "MM11_MSGS::DISPLAYGOAL"))
(shadow '*PIN_SCREEN* (find-package "MM11_MSGS::DISPLAYGOAL"))
(defconstant mm11_msgs::DisplayGoal::*PIN_SCREEN* 0)
(intern "*SCREEN_SAVER*" (find-package "MM11_MSGS::DISPLAYGOAL"))
(shadow '*SCREEN_SAVER* (find-package "MM11_MSGS::DISPLAYGOAL"))
(defconstant mm11_msgs::DisplayGoal::*SCREEN_SAVER* 1)
(intern "*MENU_SCREEN*" (find-package "MM11_MSGS::DISPLAYGOAL"))
(shadow '*MENU_SCREEN* (find-package "MM11_MSGS::DISPLAYGOAL"))
(defconstant mm11_msgs::DisplayGoal::*MENU_SCREEN* 2)
(intern "*CALIBRATION_SCREEN*" (find-package "MM11_MSGS::DISPLAYGOAL"))
(shadow '*CALIBRATION_SCREEN* (find-package "MM11_MSGS::DISPLAYGOAL"))
(defconstant mm11_msgs::DisplayGoal::*CALIBRATION_SCREEN* 3)
(intern "*TEST_SCREEN*" (find-package "MM11_MSGS::DISPLAYGOAL"))
(shadow '*TEST_SCREEN* (find-package "MM11_MSGS::DISPLAYGOAL"))
(defconstant mm11_msgs::DisplayGoal::*TEST_SCREEN* 4)

(defun mm11_msgs::DisplayGoal-to-symbol (const)
  (cond
        ((= const 0) 'mm11_msgs::DisplayGoal::*PIN_SCREEN*)
        ((= const 1) 'mm11_msgs::DisplayGoal::*SCREEN_SAVER*)
        ((= const 2) 'mm11_msgs::DisplayGoal::*MENU_SCREEN*)
        ((= const 3) 'mm11_msgs::DisplayGoal::*CALIBRATION_SCREEN*)
        ((= const 4) 'mm11_msgs::DisplayGoal::*TEST_SCREEN*)
        (t nil)))

(defclass mm11_msgs::DisplayGoal
  :super ros::object
  :slots (_screen_type _entries ))

(defmethod mm11_msgs::DisplayGoal
  (:init
   (&key
    ((:screen_type __screen_type) 0)
    ((:entries __entries) ())
    )
   (send-super :init)
   (setq _screen_type (round __screen_type))
   (setq _entries __entries)
   self)
  (:screen_type
   (&optional __screen_type)
   (if __screen_type (setq _screen_type __screen_type)) _screen_type)
  (:entries
   (&rest __entries)
   (if (keywordp (car __entries))
       (send* _entries __entries)
     (progn
       (if __entries (setq _entries (car __entries)))
       _entries)))
  (:serialization-length
   ()
   (+
    ;; uint8 _screen_type
    1
    ;; mm11_msgs/DisplayEntry[] _entries
    (apply #'+ (send-all _entries :serialization-length)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; uint8 _screen_type
       (write-byte _screen_type s)
     ;; mm11_msgs/DisplayEntry[] _entries
     (write-long (length _entries) s)
     (dolist (elem _entries)
       (send elem :serialize s)
       )
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; uint8 _screen_type
     (setq _screen_type (sys::peek buf ptr- :char)) (incf ptr- 1)
   ;; mm11_msgs/DisplayEntry[] _entries
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _entries (let (r) (dotimes (i n) (push (instance mm11_msgs::DisplayEntry :init) r)) r))
     (dolist (elem- _entries)
     (send elem- :deserialize buf ptr-) (incf ptr- (send elem- :serialization-length))
     ))
   ;;
   self)
  )

(setf (get mm11_msgs::DisplayGoal :md5sum-) "36f0c5541bca204fe564a6a8a4759722")
(setf (get mm11_msgs::DisplayGoal :datatype-) "mm11_msgs/DisplayGoal")
(setf (get mm11_msgs::DisplayGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
uint8 PIN_SCREEN=0
uint8 SCREEN_SAVER=1
uint8 MENU_SCREEN=2
uint8 CALIBRATION_SCREEN=3
uint8 TEST_SCREEN=4

uint8 screen_type
DisplayEntry[] entries

================================================================================
MSG: mm11_msgs/DisplayEntry
uint8 BUTTON=0
uint8 LABEL=1

# LABEL or BUTTON
uint8 type
# label or button text
string text

")



(provide :mm11_msgs/DisplayGoal "36f0c5541bca204fe564a6a8a4759722")


